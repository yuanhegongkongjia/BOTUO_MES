<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynamicForm.Core</name>
    </assembly>
    <members>
        <member name="T:DynamicForm.Core.BaseDA">
            <summary>
            基类
            </summary>
        </member>
        <member name="T:DynamicForm.Core.IDA">
            <summary>
            数据处理接口
            </summary>
        </member>
        <member name="M:DynamicForm.Core.IDA.SetAccess(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary)">
            <summary>
            在执行动作之前，每次都会调用，在这里可以改变 FormM，以及所有的值
            </summary>
            <param name="form"></param>
            <param name="entity"></param>
        </member>
        <member name="M:DynamicForm.Core.IDA.Insert(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary,System.String@)">
            <summary>
            插入数据
            </summary>
            <param name="form">表单定义</param>
            <param name="entity">实际提交的值</param>
            <param name="message">返回信息</param>
            <returns>成功返回 0，其他返回非 0，错误信息在 message 中</returns>
        </member>
        <member name="M:DynamicForm.Core.IDA.Update(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary,System.String@)">
            <summary>
            更新数据
            </summary>
            <param name="form">表单定义</param>
            <param name="entity">实际提交的值</param>
            <param name="message">返回信息</param>
            <returns>成功返回 0，其他返回非 0，错误信息在 message 中</returns>
        </member>
        <member name="M:DynamicForm.Core.IDA.Delete(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary,System.String@)">
            <summary>
            删除数据
            </summary>
            <param name="form">表单定义</param>
            <param name="entity">实际提交的值</param>
            <param name="message">返回信息</param>
            <returns>成功返回 0，其他返回非 0，错误信息在 message 中</returns>
        </member>
        <member name="M:DynamicForm.Core.IDA.Delete(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary,DynamicForm.Core.DataGridVM,System.String@)">
            <summary>
            删除数据 2016-11-16 新增方法，需要修改 DFHandler.ashx 才能起作用，为了在删除的时候能够给客户端返回额外的数据
            </summary>
            <param name="form">表单定义</param>
            <param name="entity">实际提交的值</param>
            <param name="vm">返回信息</param>
            <param name="message">返回信息</param>
            <returns>成功返回 0，其他返回非 0，错误信息在 message 中</returns>
        </member>
        <member name="M:DynamicForm.Core.IDA.Query(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary,DynamicForm.Core.DataGridVM,System.Int32,System.Int32,System.String@)">
            <summary>
            查询数据
            </summary>
            <param name="form">表单定义</param>
            <param name="entity">实际提交的值</param>
            <param name="vm">返回给 Datagrid 的数据</param>
            <param name="start">从第几条开始</param>
            <param name="limit">每页数量</param>
            <param name="message">返回信息</param>
            <returns>成功返回 0，其他返回非 0，错误信息在 message 中</returns>
        </member>
        <member name="M:DynamicForm.Core.IDA.Get(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary,System.String@)">
            <summary>
            更新数据的时候需要根据表名和id去查找数据
            </summary>
            <param name="form">表单定义</param>
            <param name="entity">实际提交的值</param>
            <param name="message">返回信息</param>
            <returns>成功返回实体，其他返回 null，错误信息在 message 中</returns>
        </member>
        <member name="P:DynamicForm.Core.IDA.ExecuteResult">
            <summary>
            DA 的执行结果
            </summary>
        </member>
        <member name="P:DynamicForm.Core.IDA.Model">
            <summary>
            当前 DA 的所有参数
            </summary>
        </member>
        <member name="P:DynamicForm.Core.IDA.Parent">
            <summary>
            父控件
            </summary>
        </member>
        <member name="P:DynamicForm.Core.IDA.ReportPath">
            <summary>
            报表路径
            </summary>
        </member>
        <member name="P:DynamicForm.Core.IDA.ReportDataSource">
            <summary>
            报表数据源
            </summary>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.SetAccess(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary)">
            <summary>
            这个是为了控制权限，在载入之前进行权限设置
            </summary>
            <param name="form"></param>
            <param name="entity"></param>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.GetUrlFolder">
            <summary>
            得到请求的目录
            http://localhost/app/test111/Default.aspx?v=1
            返回 http://localhost/app/test111
            </summary>
            <returns>http://localhost/app/test111</returns>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.GetUrlRoot">
            <summary>
            得到请求的根目录，不包含应用程序名
            http://localhost/app/test111/Default.aspx?v=1
            返回 http://localhost
            </summary>
            <returns>http://localhost</returns>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.GetUrlApplicationRoot">
            <summary>
            得到请求的根目录，包含应用程序名
            http://localhost/app/test111/Default.aspx?v=1
            返回 http://localhost/app
            </summary>
            <returns>http://localhost/app</returns>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.Insert(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary,System.String@)">
            <summary>
            客户端提交时的动作为 DFAction.Add 时发生的动作
            </summary>
            <param name="form"></param>
            <param name="entity"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.Update(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary,System.String@)">
            <summary>
            客户端提交时的动作为 DFAction.Update 时发生的动作
            </summary>
            <param name="form"></param>
            <param name="entity"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.Delete(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary,System.String@)">
            <summary>
            这个是由客户端调用 Handler 时，传递过来 DFAction.Delete 动作，或者客户端提交时的动作为 DFAction.Delete 时发生的动作
            </summary>
            <param name="form"></param>
            <param name="entity"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.Delete(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary,DynamicForm.Core.DataGridVM,System.String@)">
            <summary>
            这个是由客户端调用 Handler 时，传递过来 DFAction.Delete 动作，或者客户端提交时的动作为 DFAction.Delete 时发生的动作
            </summary>
            <param name="form"></param>
            <param name="entity"></param>
            <param name="vm"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.Query(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary,DynamicForm.Core.DataGridVM,System.Int32,System.Int32,System.String@)">
            <summary>
            这个是由客户端调用 Handler 时，传递过来 DFAction.Query 动作
            </summary>
            <param name="form"></param>
            <param name="entity"></param>
            <param name="vm"></param>
            <param name="start"></param>
            <param name="limit"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.IsEmptyQuery(DynamicForm.Core.DFDictionary)">
            <summary>
            检查是不是空的查询（就是客户端没有传递过来任何按钮事件）
            默认情况下，在一个页面载入的时候，就会进行查询动作，但是有的时候，我们不需要在页面载入的时候就进行查询
            特别是数据量很大的时候，默认情况都是没有查询条件的，这个会导致查询效率很低
            这个方法用来判断是不是客户单点击之后才进行的查询
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.EmptyQuery(DynamicForm.Core.DataGridVM)">
            <summary>
            返回一个空查询
            </summary>
            <param name="vm"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.Get(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary,System.String@)">
            <summary>
            页面第一次载入的时候会调用此方法，这个常用于数据的初始化，比如编辑的时候，需要把数据 Load 出来，就需要在这个方法里执行
            </summary>
            <param name="form"></param>
            <param name="entity"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.GetGridClientData``1(DynamicForm.Core.DFDictionary,System.String)">
            <summary>
            得到客户端传递过来的grid数据，如果没有传入 gridId，就返回第一个 grid 的客户端数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="gridId"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.SaveGridClientData``1(DynamicForm.Core.DFDictionary,System.Collections.Generic.List{``0},System.String)">
            <summary>
            保存客户端 grid 的数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="list"></param>
            <param name="gridId"></param>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.HasGridClientData(DynamicForm.Core.DFDictionary,System.String)">
            <summary>
            判断客户端有没有传递过来grid数据，如果没有传入 gridId，就检查第一个 grid 是否有数据
            </summary>
            <param name="entity"></param>
            <param name="gridId"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.ClearGridClientData(DynamicForm.Core.DFDictionary,System.String)">
            <summary>
            清空客户端传递过来的grid数据，如果没有传入 gridId，默认 remove 第一个 grid 的数据
            </summary>
            <param name="entity"></param>
            <param name="gridId"></param>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.ClearPanelData(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary,System.String)">
            <summary>
            清除面板上控件的内容
            </summary>
            <param name="form"></param>
            <param name="entity"></param>
            <param name="panelId"></param>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.IsPostBack">
            <summary>
            返回页面的 IsPostBack
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.SetGridSelectDataSource(DynamicForm.Core.FormM,System.String,System.Collections.Generic.List{DynamicForm.Core.DFSelectItem},System.Boolean)">
            <summary>
            放在 SetAccess 中，设置 grid 中下拉框的数据源，在 Model 中加入 {列名}_DataSource
            另外的设置
            编辑器：{xtype :'select',items : enumObj}
            Toolbar脚本：var enumObj = BUI.JSON.looseParse(StringUtil.Base64Decode($('#{列名}_DataSource').val()));
            </summary>
            <param name="form"></param>
            <param name="columnName"></param>
            <param name="list"></param>
            <param name="isAddEmptyItem"></param>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.SetSelectDataSource(DynamicForm.Core.FormM,System.String,System.Collections.Generic.List{DynamicForm.Core.DFSelectItem},System.Boolean)">
            <summary>
            设置下拉框的数据源
            </summary>
            <param name="form"></param>
            <param name="columnName"></param>
            <param name="list"></param>
            <param name="isAddEmptyItem"></param>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.GetSubmitButton(DynamicForm.Core.DFDictionary)">
            <summary>
            得到客户端点击的按钮名称
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.WriteScript(System.String,System.String@)">
            <summary>
            向客户端输出脚本，直接写脚本语句就可以了
            </summary>
            <param name="msg"></param>
            <param name="message"></param>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.WriteAlertAndCloseSelfDialog(System.String,System.String@)">
            <summary>
            设置提示信息并且关闭客户端 iframe 窗口
            </summary>
            <param name="msg"></param>
            <param name="message"></param>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.CloneData(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary,System.String@)">
            <summary>
            克隆数据
            </summary>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.CheckMustInput(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary)">
            <summary>
            检查必须输入
            </summary>
            <param name="form"></param>
            <param name="entity"></param>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.CheckInput(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary)">
            <summary>
            录入检查，会自动调用 CheckMustInput
            </summary>
            <param name="form"></param>
            <param name="entity"></param>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.PromptMsg(DynamicForm.Core.FormM,System.String,DynamicForm.Core.ClientMessageType,System.Boolean,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            向客户端显示消息，不用弹出框
            </summary>
            <param name="form"></param>
            <param name="msg"></param>
            <param name="messageType"></param>
            <param name="append"></param>
            <param name="rowId"></param>
            <param name="maxLength"></param>
            <param name="height"></param>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.SaveClientData(DynamicForm.Core.DFDictionary)">
            <summary>
            客户端临时传递数据
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.BaseDA.GetClientData">
            <summary>
            得到客户端临时传递数据
            </summary>
            <returns></returns>
        </member>
        <member name="P:DynamicForm.Core.BaseDA.Model">
            <summary>
            客户端传给服务端的所有参数，ucForm.ascx 在执行的时候，会把 Model 属性赋值给这个属性
            </summary>
        </member>
        <member name="P:DynamicForm.Core.BaseDA.Parent">
            <summary>
            对应的 ucForm.ascx 控件
            </summary>
        </member>
        <member name="P:DynamicForm.Core.BaseDA.ReportPath">
            <summary>
            报表路径
            </summary>
        </member>
        <member name="P:DynamicForm.Core.BaseDA.ReportDataSource">
            <summary>
            报表数据源
            </summary>
        </member>
        <member name="P:DynamicForm.Core.BaseDA.ExecuteResult">
            <summary>
            执行结果
            </summary>
        </member>
        <member name="T:DynamicForm.Core.ClientMessageType">
            <summary>
            客户端消息类型
            </summary>
        </member>
        <member name="F:DynamicForm.Core.ControlM.Readonly">
            <summary>
            默认不是只读的
            </summary>
        </member>
        <member name="F:DynamicForm.Core.ControlM.Visible">
            <summary>
            默认可见
            </summary>
        </member>
        <member name="M:DynamicForm.Core.ControlM.Create(DynamicForm.Core.FormM,DynamicForm.Core.RowM)">
            <summary>
            创建控件
            </summary>
            <param name="form"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.ControlM.CreateHidden(DynamicForm.Core.FormM,DynamicForm.Core.RowM)">
            <summary>
            创建控件
            </summary>
            <param name="form"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.ControlM.GenerateMustInput">
            <summary>
            生成必须输入选项
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.ControlM.GenerateUploadToDB(DynamicForm.Core.DFDictionary)">
            <summary>
            生成一个上传控件
            需要一个 hidden 的 input，名字用控件名称表示，用来保存 FileId
            需要一个显示的链接，名字用 控件名称_display ，用来显示 FileName
            需要一个上传按钮，点击按钮的时候，名字用 控件名称_upload_botton 弹出对话框并且上传
            显示的 input 点击的时候，可以下载文件
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="P:DynamicForm.Core.DataGridVM.data">
            <summary>
            额外的数据
            </summary>
        </member>
        <member name="F:DynamicForm.Core.DFPub.EXECUTE_ERROR">
            <summary>
            -1 表示发生错误
            </summary>
        </member>
        <member name="F:DynamicForm.Core.DFPub.EXECUTE_SUCCESS">
            <summary>
            0 表示执行成功
            </summary>
        </member>
        <member name="F:DynamicForm.Core.DFPub.DF_OUTERDIV">
            <summary>
            Panel 外层 div 的 id 前缀
            </summary>
        </member>
        <member name="F:DynamicForm.Core.DFPub.DF_PAGEDIV">
            <summary>
            最外面的一个div
            </summary>
        </member>
        <member name="F:DynamicForm.Core.DFPub.DF_FORMNAME">
            <summary>
            表单名字的key，系统内部使用，尽量不能与动态表单上的字段相同
            </summary>
        </member>
        <member name="F:DynamicForm.Core.DFPub.DF_ACTION">
            <summary>
            在表单生成的时候，会生成一些按钮，为了标志这些按钮事件，按钮的名称都以 DF_ACTION 开头，生成 DF_ACTION_{按钮动作名称}_{定义的按钮名称}
            </summary>
        </member>
        <member name="F:DynamicForm.Core.DFPub.DF_DATAGRID_PAGESIZE">
            <summary>
            定义 Datagrid 每页显示的记录数，默认是 10 条
            </summary>
        </member>
        <member name="F:DynamicForm.Core.DFPub.DF_DATAGRID_EXPORT">
            <summary>
            导出查询结果
            </summary>
        </member>
        <member name="F:DynamicForm.Core.DFPub.DF_DATAGRID_HIDDEN_">
            <summary>
            用来存储并保存 datagrid 中动态控件的值，否则的话，动态生成的控件，如果没有把值存放在数据库里面，那么刷新后，值就没有了。
            </summary>
        </member>
        <member name="F:DynamicForm.Core.DFPub.DF_SCRIPT">
            <summary>
            在配置文件中，有时需要写 js 脚本，采用注释方式写可以避免转义之类的问题，规定格式为 <!--DF_SCRIPT 这里是你的脚本 -->
            </summary>
        </member>
        <member name="F:DynamicForm.Core.DFPub.DF_DATA_EXCHANGE">
            <summary>
            数据交换
            </summary>
        </member>
        <member name="F:DynamicForm.Core.DFPub.DF_UPLOAD">
            <summary>
            上传控件中的上传按钮名称前缀
            </summary>
        </member>
        <member name="M:DynamicForm.Core.DFPub.GetCountSql(System.String)">
            <summary>
            得到 count sql 语句
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.DFPub.GetPageSql(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            得到分页sql语句，注意，row_number()是从1开始的。Oracle SQLServer 通用
            </summary>
            <param name="db"></param>
            <param name="sql"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.DFPub.GetPageSql(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            得到分页sql语句，注意，row_number()是从1开始的。
            </summary>
            <param name="sql"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.DFPub.ReadText(System.String)">
            <summary>
            读取相关的模板文件
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.DFPub.CheckFormConfig(System.String)">
            <summary>
            配置检查
            </summary>
            <param name="configFolder"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.DFPub.GetFormConfig(System.String)">
            <summary>
            根据 FormName 得到对应的配置
            </summary>
            <param name="formName"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.DFPub.GetFormM(System.String)">
            <summary>
            根据 formName 得到 FormM
            </summary>
            <param name="formName"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.DFPub.SetDBEntity(DynamicForm.Core.DFDictionary,DynamicForm.Core.FormM@,DynamicForm.Core.DFDictionary@)">
            <summary>
            根据 dict 返回相应的 Form 配置，和克隆的 DFDictionary
            </summary>
            <param name="source"></param>
            <param name="form"></param>
            <param name="dest"></param>
        </member>
        <member name="M:DynamicForm.Core.DFPub.GetCurrentPhysicalFolder">
            <summary>
            得到当前请求页面所在的目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.DFPub.PhysicalToRelative(System.String)">
            <summary>
            将物理路径转换成相对路径，含应用程序名
            </summary>
            <param name="physicalPath"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.DFPub.GetAction(DynamicForm.Core.DFDictionary)">
            <summary>
            查询提交的字典数据中的按钮事件
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.DFPub.ReplaceDFScript(System.String,System.Boolean)">
            <summary>
            如果是运行时，会进行多语言替换
            </summary>
            <param name="value"></param>
            <param name="runtime"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.DFPub.GetDFDictionary(System.Web.HttpRequest)">
            <summary>
            得到客户端提交的信息
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.DFPub.RemoveDuplicatedValue(System.String)">
            <summary>
            当数据是 1,1,1,1 的时候，自动转化成 1，当数据是 1,1,2 的时候，数据不变
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.DFPub.GetDFDictionary(System.Web.HttpRequest,System.String)">
            <summary>
            得到客户端提交的信息
            </summary>
            <param name="request"></param>
            <param name="dfFormName"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.FormM.RenderPanels(DynamicForm.Core.DFDictionary,System.Collections.Generic.List{DynamicForm.Core.PanelM})">
            <summary>
            渲染面板
            </summary>
            <param name="dict"></param>
            <param name="panels"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.FormM.HasLayout">
            <summary>
            是否含有布局
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.FormM.GetColumnM(System.String)">
            <summary>
            得到列，如果列名不存在，默认返回一个新的列实例
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.FormM.GetControlM(System.String)">
            <summary>
            得到控件，如果控件不存在，默认返回一个新的列实例，保证在赋值的时候不会报错
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.FormM.GetControlM(System.String,System.String)">
            <summary>
            得到控件，如果控件不存在，默认返回一个新的列实例，保证在赋值的时候不会报错
            </summary>
            <param name="panelId"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.FormM.GetControlMs(System.String)">
            <summary>
            得到控件
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.FormM.GetControlMs_Like(System.String)">
            <summary>
            得到控件
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.FormM.GetControlMs(System.String,System.String)">
            <summary>
            得到面板的控件
            </summary>
            <param name="panelId"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.PanelM.RenderScript(DynamicForm.Core.FormM,DynamicForm.Core.DFDictionary)">
            <summary>
            
            </summary>
            <param name="form"></param>
            <param name="data">客户端传过来的值</param>
            <returns></returns>
        </member>
        <member name="P:DynamicForm.Core.PanelM.PanelPlugins">
            <summary>
            主要用在表格中，多个插件用逗号分割，常用的 Plugins 有：
            BUI.Grid.Plugins.AutoFit 表格自适应宽度
            BUI.Grid.Plugins.CheckSelection 选择行插件
            BUI.Grid.Plugins.RadioSelection 表格单选插件
            BUI.Grid.Plugins.RowNumber 表格显示行序号的插件
            </summary>
        </member>
        <member name="P:DynamicForm.Core.PanelM.Additional">
            <summary>
            附加属性
            </summary>
        </member>
        <member name="P:DynamicForm.Core.PanelM.Position">
            <summary>
            面板位置
            </summary>
        </member>
        <member name="P:DynamicForm.Core.PanelM.TabContainer">
            <summary>
            选项卡容器
            </summary>
        </member>
        <member name="T:DynamicForm.Core.DFSelectItem">
            <summary>
            下拉框选项
            </summary>
        </member>
        <member name="M:DynamicForm.Core.DFSelectItem.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:DynamicForm.Core.DFSelectItem.#ctor(System.String,System.String)">
            <summary>
            构造
            </summary>
            <param name="text"></param>
            <param name="value"></param>
        </member>
        <member name="P:DynamicForm.Core.DFSelectItem.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:DynamicForm.Core.DFSelectItem.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:DynamicForm.Core.QueryBuilder">
            <summary>
            查询条件构造
            </summary>
        </member>
        <member name="M:DynamicForm.Core.QueryBuilder.SetKey(System.String,System.String@)">
            <summary>
            key 值需要去掉 sql 语句中表的别名
            </summary>
            <param name="columnName"></param>
            <param name="key"></param>
        </member>
        <member name="T:DynamicForm.Core.SessionType">
            <summary>
            Session 类型
            </summary>
        </member>
        <member name="F:DynamicForm.Core.SessionType.PCClient">
            <summary>
            PC 端 Session
            </summary>
        </member>
        <member name="F:DynamicForm.Core.SessionType.MobileClient">
            <summary>
            移动端 Session
            </summary>
        </member>
        <member name="T:DynamicForm.Core.SessionHelper">
            <summary>
            Session 帮助类
            </summary>
        </member>
        <member name="M:DynamicForm.Core.SessionHelper.RefreshUserToken(System.String,System.String)">
            <summary>
            刷新令牌，直接给4个小时的过期时间
            </summary>
            <param name="UserId"></param>
            <param name="SessionType"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.SessionHelper.SetSessionCookie(WFCore.WF_T_SESSION)">
            <summary>
            设置 Cookie
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:DynamicForm.Core.SessionHelper.DB_GetSessionByUserId(System.String,System.String)">
            <summary>
            根据用户编号和 SessionType 得到 Session
            </summary>
            <param name="UserId"></param>
            <param name="SessionType"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.SessionHelper.GetSession(System.String,DynamicForm.Core.SessionType)">
            <summary>
            根据 UserId 和 SessionType 得到 Session，如果 token 过期，返回空
            如果没有过期，系统会看 token 离过期时间还有多少时间
            如果马上要过期了，那么再刷新一下，再给 4 个小时的过期时间
            </summary>
            <param name="UserId"></param>
            <param name="sessionType"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.SessionHelper.GetSession(System.String,System.String)">
            <summary>
            根据 UserId 和 SessionType 得到 Session，如果 token 过期，返回空
            如果没有过期，系统会看 token 离过期时间还有多少时间
            如果马上要过期了，那么再刷新一下，再给 4 个小时的过期时间
            </summary>
            <param name="UserId"></param>
            <param name="SessionType"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.SessionHelper.GetSession(System.String)">
            <summary>
            根据 Token 得到 Session，如果 token 过期，返回空
            如果没有过期，系统会看 token 离过期时间还有多少时间
            如果马上要过期了，那么再刷新一下，再给 4 个小时的过期时间
            </summary>
            <param name="Token"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.SessionHelper.DB_GetSessionByToken(System.String)">
            <summary>
            根据 Token 得到 Session
            </summary>
            <param name="Token"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.SessionHelper.Save``1(System.String,``0)">
            <summary>
            保存数据到 Session 中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="t"></param>
        </member>
        <member name="M:DynamicForm.Core.SessionHelper.Remove(System.String)">
            <summary>
            从 Session 中移除数据
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:DynamicForm.Core.SessionHelper.Get``1(System.String)">
            <summary>
            从 Session 中取出数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.VisibleHelper.SetVisible(DynamicForm.Core.DFDictionary,System.String,System.Boolean)">
            <summary>
            设置可见
            </summary>
            <param name="dict"></param>
            <param name="html"></param>
            <param name="Visible"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.ReadonlyHelper.SetReadonly(DynamicForm.Core.DFDictionary,System.String,System.Boolean)">
            <summary>
            设置只读
            </summary>
            <param name="dict"></param>
            <param name="html"></param>
            <param name="Readonly"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicForm.Core.WFTreeHelper.SetStatus(System.Collections.Generic.List{DynamicForm.Core.WFTreeNode},System.Collections.Generic.List{DynamicForm.Core.WFTreeNode})">
            <summary>
            根据 listStatus 里面设置的 selected expanded _checked 去遍历 list（包括子节点）
            listStatus 只是一个 list，包含属性 id selected expanded _checked 就可以了
            </summary>
            <param name="list"></param>
            <param name="listStatus"></param>
        </member>
        <member name="T:DynamicForm.Core.WFTreeNode">
            <summary>
            树节点
            </summary>
        </member>
    </members>
</doc>
